classes: {
  soft: {
    style: {
      stroke-dash: 5
      stroke-width: 1
    }
  }

  old: {
    style.fill: "#ffaaaa"
  }
  new: {
    style.fill: "#bbeebb"
  }
  old_arr: {
    style.font-color: "#bb0000"
  }
  new_arr: {
    style.font-color: "#008800"
  }
}

direction: down

user: Player {
  shape: person
  style.multiple: true
}

user -> pc.launcher: starts {class: soft}
user -> pc.new_client: starts {class: soft}

game_server: Game Server {
  tooltip: |md
    All game servers are provisioned and maintained via Ansible playbook.

    Repo: https://github.com/beyond-all-reason/ansible-spads-setup
  |
  style.multiple: true
  link: layers.game_server

  engine_dedi: Recoil Engine (dedicated) {
    tooltip: |md
      A special version of Recoil Engine that doesn't run any simulation, but synchronizes and forwards all game commands between players.

      All the communication between Game and SPADS/teiserver happens via Autohost interface.
    |
    style.multiple: true
  }

  spads: SPADS {
    class: old
    tooltip: |md
      Manages individual lobby rooms

      Repo: https://github.com/Yaribz/SPADS
    |
    style.multiple: true
  }

  assets: Game Assets {
    class: old
    shape: page
  }

  autohost: Recoil Autohost {
    class: new
    tooltip: |md
      Spins ups new engine instances and translates communication between engine and teiserver.

      Repo: https://github.com/beyond-all-reason/recoil-autohost
    |
  }

  spads -> engine_dedi: starts {class: soft}

  engine_dedi <-> spads: Autohost Protocol

  engine_dedi -> assets: reads
  spads -> assets: reads

  autohost -> engine_dedi: starts {class: soft}

  engine_dedi <-> autohost: Autohost Protocol
}

pc: Player's PC {
  style.multiple: true

  engine: Recoil Engine {
    link: https://github.com/beyond-all-reason/spring

    chobby: Chobby {
      class: old
      tooltip: |md
        The lobby player sees when opening the game

        Repo: https://github.com/beyond-all-reason/BYAR-Chobby
      |
    }
    game: BAR Game {
      tooltip: |md
        The actual core Beyond All Reason game

        Repo: https://github.com/beyond-all-reason/Beyond-All-Reason
      |
    }

    chobby -> game: starts {class: soft}
  }
  launcher: Spring Launcher {
    class: old
    tooltip: |md
      Responsible for downloading and updating engine and all of the assets before launching the game.

      Repo: https://github.com/beyond-all-reason/spring-launcher
    |
  }
  prd: pr-downloader {
    tooltip: |md
      CLI application that downloads updates in efficient format understood by the engine.

      Repo: https://github.com/beyond-all-reason/pr-downloader
    |
  }

  assets: Game Assets {
    shape: page
    tooltip: Engine, Maps, Game files
  }

  new_client: New Client {
    class: new
    tooltip: |md
      New Client build on Electron framework.

      Repo: https://github.com/beyond-all-reason/bar-lobby
    |
  }

  new_client -> engine: starts {class: soft}

  new_client -> prd: CLI invoke

  launcher -> engine: starts {class: soft}

  launcher -> prd: CLI invoke

  prd -> assets: writes
  engine -> assets: reads

  engine.chobby -> launcher: bridge protocol
}

teiserver: Teiserver {
  tooltip: |md
    The main "Server" of the game. https://server4.beyondallreason.info/

    It faciliates:
     - Communication between players and hosts
     - Accounts management
     - Rating
     - Moderation

    Repo: https://github.com/beyond-all-reason/teiserver/
  |
}

game_server.spads <-> teiserver: SpringLobby protocol {class: old_arr}
pc.engine.chobby <-> teiserver: SpringLobby protocol {class: old_arr}

game_server.engine_dedi <-> pc.engine: Engine Protocol

live_services: BAR Live Services {
  tooltip: |md
    BAR Live Services https://bar-rts.com/ hosts replay, list of active matches etc

    - Frontend: https://github.com/beyond-all-reason/bar-live-services
    - Backend: https://github.com/beyond-all-reason/bar-db
  |
}

live_services <-> teiserver: SpringLobby protocol {class: old_arr}
game_server.spads -> live_services: uploads replays {class: soft}

game_server.autohost <-> teiserver: Tachyon protocol {class: new_arr}
pc.new_client <-> teiserver: Tachyon protocol {class: new_arr}

live_services <-> teiserver: ??? (to be designed) {class: new_arr}
game_server.autohost -> live_services: uploads replays {
  class: soft
  tooltip: lol
}

legend: Legend {
  direction: right
  near: bottom-center
  style.fill: transparent
  style.stroke: transparent

  New Components: {
    top: 0
    left: 0
    class: new
    tooltip: Components that are added as part of the work
  }

  Deprecated Components: {
    top: 0
    left: 200
    class: old
    tooltip: Components that are being deprecated and will be removed after this project is finished
  }
}
