{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This documentation site describes the components of the Beyond All Reason (BAR) Infrastructure and how they connect to each other.</p> <p>On a very high level:</p> InfrastructureRecoil EngineGame Online ServicesGame ServersLobby ClientLobby ServerBeyond All Reason Game InfrastructureRecoil EngineGame Online ServicesGame ServersLobby ClientLobby ServerBeyond All Reason Game <p>Infrastructure contains all the software, configuration, and resources that support the running of the Beyond All Reason game on the Recoil engine, which includes: lobby server, launcher, game files hosting, multiplayer game servers, server management, and more.</p> <p>Please explore the site for any information that you are interested in. If you are just starting, we recommend looking at the more detailed system overview.</p> <p>Happy reading \ud83d\ude42!</p>"},{"location":"assets_serving/","title":"Assets Serving","text":""},{"location":"assets_serving/#legend","title":"Legend","text":"<p>GitHubCloudflareGoogle CloudVirtual MachineOther GitHubCloudflareGoogle CloudVirtual MachineOther </p>"},{"location":"assets_serving/#overview","title":"Overview","text":"<p>userRapidMaps Metadatahttps://maps-metadata.beyondallreason.dev/  Cloudflare worker serving data from R2 bucket  https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud/servingError Logshttps://log.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/logs-uploadLauncher Confighttps://launcher-config.beyondallreason.dev/config.json  Source: https://github.com/p2004a/spring-launcher-config-srvFileshttps://files-cdn.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/maps-hostingPoolHosts only https://pool-init.beyondallreason.dev/data.7zRowyhttps://rowy.beyondallreason.dev/  Our own deployment of Rowy with custom patches as Firebase app on GCP.  There is also a bunch of small services there to support syncing, inside https://github.com/beyond-all-reason/maps-metadata/tree/main/cloudMaps MetadataPool package buildChobbySPADS ConfigGoogle Drive MapsMain WebsiteWhat is hosted on https://www.beyondallreason.info/maps  Build using WebflowworkerworkerworkerR2R2 MetadataR2 ImagesKVR2 readreadImage transformread/writeread/writesync single mapsave imagesreadwritePush commitPush commitPush metadataSync mapsPullPush dist_cfg/config.jsonhttps://maps-metadata.beyondallreason.dev/  Cloudflare worker serving data from R2 bucket  https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud/serving https://log.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/logs-upload https://launcher-config.beyondallreason.dev/config.json  Source: https://github.com/p2004a/spring-launcher-config-srv https://files-cdn.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/maps-hosting Hosts only https://pool-init.beyondallreason.dev/data.7z https://rowy.beyondallreason.dev/  Our own deployment of Rowy with custom patches as Firebase app on GCP.  There is also a bunch of small services there to support syncing, inside https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud What is hosted on https://www.beyondallreason.info/maps  Build using Webflow userRapidMaps Metadatahttps://maps-metadata.beyondallreason.dev/  Cloudflare worker serving data from R2 bucket  https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud/servingError Logshttps://log.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/logs-uploadLauncher Confighttps://launcher-config.beyondallreason.dev/config.json  Source: https://github.com/p2004a/spring-launcher-config-srvFileshttps://files-cdn.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/maps-hostingPoolHosts only https://pool-init.beyondallreason.dev/data.7zRowyhttps://rowy.beyondallreason.dev/  Our own deployment of Rowy with custom patches as Firebase app on GCP.  There is also a bunch of small services there to support syncing, inside https://github.com/beyond-all-reason/maps-metadata/tree/main/cloudMaps MetadataPool package buildChobbySPADS ConfigGoogle Drive MapsMain WebsiteWhat is hosted on https://www.beyondallreason.info/maps  Build using WebflowworkerworkerworkerR2R2 MetadataR2 ImagesKVR2 readreadImage transformread/writeread/writesync single mapsave imagesreadwritePush commitPush commitPush metadataSync mapsPullPush dist_cfg/config.jsonhttps://maps-metadata.beyondallreason.dev/  Cloudflare worker serving data from R2 bucket  https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud/serving https://log.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/logs-upload https://launcher-config.beyondallreason.dev/config.json  Source: https://github.com/p2004a/spring-launcher-config-srv https://files-cdn.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/maps-hosting Hosts only https://pool-init.beyondallreason.dev/data.7z https://rowy.beyondallreason.dev/  Our own deployment of Rowy with custom patches as Firebase app on GCP.  There is also a bunch of small services there to support syncing, inside https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud What is hosted on https://www.beyondallreason.info/maps  Build using Webflow </p>"},{"location":"assets_serving/#files","title":"Files","text":"<p>userFileshttps://files-cdn.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/maps-hostingSpringFilesFilesRecoil EngineworkerR2 Assets3 buckets geographically distributes across North America, Europe, and Asia.KVCache PubSubCacherMaps Upload BucketMappers have permission to directly put new map files there via web interface to upload them to CDN.  https://console.cloud.google.com/storage/browser/bar-springfiles-syncer_assets-upload readreadsyncfallback lookupPubSub Upload triggertriggerwritewritereaddownload releasereadNew releasehttps://files-cdn.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/maps-hosting 3 buckets geographically distributes across North America, Europe, and Asia. Mappers have permission to directly put new map files there via web interface to upload them to CDN.  https://console.cloud.google.com/storage/browser/bar-springfiles-syncer_assets-upload userFileshttps://files-cdn.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/maps-hostingSpringFilesFilesRecoil EngineworkerR2 Assets3 buckets geographically distributes across North America, Europe, and Asia.KVCache PubSubCacherMaps Upload BucketMappers have permission to directly put new map files there via web interface to upload them to CDN.  https://console.cloud.google.com/storage/browser/bar-springfiles-syncer_assets-upload readreadsyncfallback lookupPubSub Upload triggertriggerwritewritereaddownload releasereadNew releasehttps://files-cdn.beyondallreason.dev/  Source: https://github.com/beyond-all-reason/maps-hosting 3 buckets geographically distributes across North America, Europe, and Asia. Mappers have permission to directly put new map files there via web interface to upload them to CDN.  https://console.cloud.google.com/storage/browser/bar-springfiles-syncer_assets-upload </p>"},{"location":"assets_serving/#rapid","title":"Rapid","text":"<p>userBunny CDNUsed only for hosting Rapid repo, domain https://repos-cdn.beyondallreason.dev/.  We are using https://bunny.net/Rapid Build ServerManaged with Ansible playbook: https://github.com/beyond-all-reason/rapid-hostingRapid SyncerChobbyBeyond-All-ReasonBucketEdge RulecronRapidToolsRapidTools is package that is used to actually compile git repository to Rapid format  Source: https://github.com/beyond-all-reason/RapidToolsRapid RepoGit CheckoutsHTTP ServerUpdate ScriptschedulerCDN SyncerVersion Pinner invokewritetriggerreadwritereadtriggertriggerreadread/writePin latest versionGit pullGit pullTrigger build (ssh)Trigger build (ssh)triggertriggertriggertriggerUsed only for hosting Rapid repo, domain https://repos-cdn.beyondallreason.dev/.  We are using https://bunny.net/ Managed with Ansible playbook: https://github.com/beyond-all-reason/rapid-hosting RapidTools is package that is used to actually compile git repository to Rapid format  Source: https://github.com/beyond-all-reason/RapidTools userBunny CDNUsed only for hosting Rapid repo, domain https://repos-cdn.beyondallreason.dev/.  We are using https://bunny.net/Rapid Build ServerManaged with Ansible playbook: https://github.com/beyond-all-reason/rapid-hostingRapid SyncerChobbyBeyond-All-ReasonBucketEdge RulecronRapidToolsRapidTools is package that is used to actually compile git repository to Rapid format  Source: https://github.com/beyond-all-reason/RapidToolsRapid RepoGit CheckoutsHTTP ServerUpdate ScriptschedulerCDN SyncerVersion Pinner invokewritetriggerreadwritereadtriggertriggerreadread/writePin latest versionGit pullGit pullTrigger build (ssh)Trigger build (ssh)triggertriggertriggertriggerUsed only for hosting Rapid repo, domain https://repos-cdn.beyondallreason.dev/.  We are using https://bunny.net/ Managed with Ansible playbook: https://github.com/beyond-all-reason/rapid-hosting RapidTools is package that is used to actually compile git repository to Rapid format  Source: https://github.com/beyond-all-reason/RapidTools </p>"},{"location":"assets_serving/#rowy","title":"Rowy","text":"<p>userMaps Metadatahttps://maps-metadata.beyondallreason.dev/  Cloudflare worker serving data from R2 bucket  https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud/servingRowyhttps://rowy.beyondallreason.dev/  Our own deployment of Rowy with custom patches as Firebase app on GCP.  There is also a bunch of small services there to support syncing, inside https://github.com/beyond-all-reason/maps-metadata/tree/main/cloudMaps MetadataworkerR2 MetadataR2 ImagesImagorFrontendFirebase frontend, https://rowy.beyondallreason.dev/FirestoreMap ParserGithub TriggerUploaded Assets BucketParsed Maps Bucket readreadImage transformread/writereadread/writeinvokeinvokewritereadreadwritesync single mapPush metadataPullhttps://maps-metadata.beyondallreason.dev/  Cloudflare worker serving data from R2 bucket  https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud/serving https://rowy.beyondallreason.dev/  Our own deployment of Rowy with custom patches as Firebase app on GCP.  There is also a bunch of small services there to support syncing, inside https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud Firebase frontend, https://rowy.beyondallreason.dev/ userMaps Metadatahttps://maps-metadata.beyondallreason.dev/  Cloudflare worker serving data from R2 bucket  https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud/servingRowyhttps://rowy.beyondallreason.dev/  Our own deployment of Rowy with custom patches as Firebase app on GCP.  There is also a bunch of small services there to support syncing, inside https://github.com/beyond-all-reason/maps-metadata/tree/main/cloudMaps MetadataworkerR2 MetadataR2 ImagesImagorFrontendFirebase frontend, https://rowy.beyondallreason.dev/FirestoreMap ParserGithub TriggerUploaded Assets BucketParsed Maps Bucket readreadImage transformread/writereadread/writeinvokeinvokewritereadreadwritesync single mapPush metadataPullhttps://maps-metadata.beyondallreason.dev/  Cloudflare worker serving data from R2 bucket  https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud/serving https://rowy.beyondallreason.dev/  Our own deployment of Rowy with custom patches as Firebase app on GCP.  There is also a bunch of small services there to support syncing, inside https://github.com/beyond-all-reason/maps-metadata/tree/main/cloud Firebase frontend, https://rowy.beyondallreason.dev/ </p>"},{"location":"components/","title":"Components Index","text":"<p>Infra is spread across many different repositories, with different functions. On this page is a current comprehensive list (index like) of everything that BAR infrastructure consists of.</p> <p>Note</p> <p>Even though many of the repositories below are hosting UI visible to players, the infrastructure team is not responsible for the design and overall UX improvements. The same applies to rating, balancing and data analysis. Other BAR development teams are supposed to drive planning and improvements to those aspects.</p>"},{"location":"components/#live-games-serving","title":"Live games serving","text":"<p>The server side components responsible for facilitating live games: hosting the engine instances clients connect to to play the game.</p> <ul> <li>Yaribz/SPADS: Game lobby room hosting and engine handling on game servers.</li> <li>spads_config_bar: Spads configuration, bar manager plugin, official plugins   configuration.</li> <li>ansible-spads-setup: Overall game servers configuration.</li> <li>recoil-autohost: Work in progress tachyon protocol autohost.</li> </ul> <p>There is also some monitoring setup: health checks using healthchecks.io and Okema's Zabbix instance.</p>"},{"location":"components/#lobby-rooms-serving","title":"Lobby rooms serving","text":"<p>The online components needed to set up and prepare the lobby rooms before the game happens.</p> <ul> <li> <p>teiserver: The primary piece here responsible for all the:</p> <ul> <li>Account management logic</li> <li>Moderation</li> <li>Lobby rooms permissions and management</li> <li>Middleware between client side components and SPADS</li> </ul> <p>hailstorm are the integration tests.</p> </li> <li> <p>ansible-teiserver: Teiserver server configuration.</p> </li> <li>tachyon: Work in progress new lobby server protocol specification.</li> <li>Even though the SPADS and its configuration is mentioned in the previous   section, it also belongs here. SPADS is handling both lobby rooms setup and   then game handling.</li> </ul>"},{"location":"components/#client-side-infra","title":"Client side infra","text":"<p>Pieces responsible for ensuring that players have all the assets available and ready to start the game.</p> <ul> <li> <p>BYAR-Chobby: Our current lobby client.</p> <p>It's responsible for communication with lobby server, launcher, preparing engine start script.</p> </li> <li> <p>bar-lobby: New work in progress lobby client.</p> </li> <li>spring-launcher: Game installer and launcher.<ul> <li>flathub/info.beyondallreason.bar: Linux Flatpak package for launcher.</li> </ul> </li> <li> <p>pr-downloader: CLI application distributed with engine used for downloading   mods/games</p> <p>Could be interpreted also to belong in the engine team, but it heavily impacts infra.</p> </li> <li> <p>bar_debug_launcher: BAR Debug launcher. It's not intended for end users,   it is a developer tool.</p> </li> </ul>"},{"location":"components/#game-assets-distribution","title":"Game assets distribution","text":"<p>Infrastructure responsible for making all the game assets available to players.</p> <ul> <li>RapidTools: Packaging of game git repo to rapid format.</li> <li>rapid-hosting: Rapid build server configuration.</li> <li>Game CDN distribution: CDN management and syncers to CDN.<ul> <li>recoil-rapid-syncer: Rapid repo syncer from builder host to CDN.   Also includes a prober to for debugging CDN replication issues.</li> <li>p2004a/bar-repos-bunny-replication-lag-mitigation: Helper to make sure   updates to CDN are pushed in consistent way.</li> <li>p2004a/rapid-pool-init: Builder for the initial rapid game download.   package.</li> </ul> </li> <li>maps-hosting: Map CDN: publishing, serving, IaC setup.</li> <li>Maps metadata setup<ul> <li>maps-metadata: Main repo that transforms data and distributes to other   places via GitHub actions. Also contains source for a few server side   components of that system.</li> <li>Maintenance of https://rowy.beyondallreason.dev/ (deployment with custom BAR patches).</li> </ul> </li> </ul>"},{"location":"components/#auxiliary-services","title":"Auxiliary services","text":"<ul> <li>BAR Live services (replays, leaderboard, battles linked as <code>iframe</code>s from www.beyondallreason.info):<ul> <li>bar-db: Backend service, effectively https://api.bar-rts.com/</li> <li>bar-live-services: Frontend embeded in main website https://bar-rts.com/</li> </ul> </li> <li>Teiserver contains some additional functionality in this category:<ul> <li>Microblog</li> <li>Discord bot</li> <li>Engine crash logs</li> </ul> </li> <li>logs-upload: Small Cloudflare worker to handle log upload from launcher.</li> <li>Main website is created in Webflow and not part of BAR   infrastructure.</li> </ul>"},{"location":"current_infra/","title":"Runtime Infrastructure","text":"<p>On this page, we describe the components of the \"Runtime\" infrastructure: roughly what players interact with in a direct way to play local and multiplayer games, browse the website, etc.</p> <p>All components of the runtime infrastructure also need to fetch different assets and configurations to function, and that part is described on the Assets Serving page.</p>"},{"location":"current_infra/#system-diagram","title":"System diagram","text":"<p>Tip</p> <p>Elements with \u24d8 on the diagram have tooltips. Hover over them to see more information.</p> <p>PlayerPlayer's PCMain Websitehttps://www.beyondallreason.info, built using [Webflow](https://webflow.com/)Game ServerAll game servers are provisioned and maintained via Ansible playbook.  Repo: https://github.com/beyond-all-reason/ansible-spads-setupAssets ServingWe use multiple CDNs and endpoints for hosting different game assets and configuration.  We don't include all the arrows on the diagram for clarity.Email ServerDiscordLobby ServerThe server is provisioned and configured via Ansible playbook.  Repo: https://github.com/beyond-all-reason/ansible-teiserverBAR Live ServicesBAR Live Services https://bar-rts.com/ hosts replay, list of active matches etc  - Frontend: https://github.com/beyond-all-reason/bar-live-services - Backend: https://github.com/beyond-all-reason/bar-db<p>SpringLobby Protocol: https://github.com/spring/LobbyProtocol</p> Spring LauncherResponsible for downloading and updating engine and all of the assets before launching the game.  Repo: https://github.com/beyond-all-reason/spring-launcherRecoil Engine (dedicated)A special version of Recoil Engine that doesn't run any simulation, but synchronizes and forwards all game commands between players.  All the communication between Game and SPADS/teiserver happens via Autohost interface.SPADSManages individual lobby rooms  Repo: https://github.com/Yaribz/SPADSGame AssetsRecoil Enginepr-downloaderCLI application that downloads updates in efficient format understood by the engine.  Repo: https://github.com/beyond-all-reason/pr-downloaderGame AssetsEngine, Maps, Game filesTeiserverThe main \"Server\" of the game. https://server4.beyondallreason.info/  It faciliates:  - Communication between players and hosts  - Accounts management  - Rating  - Moderation  Repo: https://github.com/beyond-all-reason/teiserver/PostgreSQLChobbyThe lobby player sees when opening the game  Repo: https://github.com/beyond-all-reason/BYAR-ChobbyBAR GameThe actual core Beyond All Reason game  Repo: https://github.com/beyond-all-reason/Beyond-All-Reason startsusesstarts Autohost ProtocolreadsreadsstartsstartsCLI invokewritesreadsbridge protocolSMTPSpringLobby protocolSpringLobby protocolEngine ProtocolSpringLobby protocoluploads replaysembedshttps://www.beyondallreason.info, built using [Webflow](https://webflow.com/) All game servers are provisioned and maintained via Ansible playbook.  Repo: https://github.com/beyond-all-reason/ansible-spads-setup We use multiple CDNs and endpoints for hosting different game assets and configuration.  We don't include all the arrows on the diagram for clarity. The server is provisioned and configured via Ansible playbook.  Repo: https://github.com/beyond-all-reason/ansible-teiserver BAR Live Services https://bar-rts.com/ hosts replay, list of active matches etc  - Frontend: https://github.com/beyond-all-reason/bar-live-services - Backend: https://github.com/beyond-all-reason/bar-db Responsible for downloading and updating engine and all of the assets before launching the game.  Repo: https://github.com/beyond-all-reason/spring-launcher A special version of Recoil Engine that doesn't run any simulation, but synchronizes and forwards all game commands between players.  All the communication between Game and SPADS/teiserver happens via Autohost interface. Manages individual lobby rooms  Repo: https://github.com/Yaribz/SPADS CLI application that downloads updates in efficient format understood by the engine.  Repo: https://github.com/beyond-all-reason/pr-downloader Engine, Maps, Game files The main \"Server\" of the game. https://server4.beyondallreason.info/  It faciliates:  - Communication between players and hosts  - Accounts management  - Rating  - Moderation  Repo: https://github.com/beyond-all-reason/teiserver/ The lobby player sees when opening the game  Repo: https://github.com/beyond-all-reason/BYAR-Chobby The actual core Beyond All Reason game  Repo: https://github.com/beyond-all-reason/Beyond-All-Reason PlayerPlayer's PCMain Websitehttps://www.beyondallreason.info, built using [Webflow](https://webflow.com/)Game ServerAll game servers are provisioned and maintained via Ansible playbook.  Repo: https://github.com/beyond-all-reason/ansible-spads-setupAssets ServingWe use multiple CDNs and endpoints for hosting different game assets and configuration.  We don't include all the arrows on the diagram for clarity.Email ServerDiscordLobby ServerThe server is provisioned and configured via Ansible playbook.  Repo: https://github.com/beyond-all-reason/ansible-teiserverBAR Live ServicesBAR Live Services https://bar-rts.com/ hosts replay, list of active matches etc  - Frontend: https://github.com/beyond-all-reason/bar-live-services - Backend: https://github.com/beyond-all-reason/bar-db<p>SpringLobby Protocol: https://github.com/spring/LobbyProtocol</p> Spring LauncherResponsible for downloading and updating engine and all of the assets before launching the game.  Repo: https://github.com/beyond-all-reason/spring-launcherRecoil Engine (dedicated)A special version of Recoil Engine that doesn't run any simulation, but synchronizes and forwards all game commands between players.  All the communication between Game and SPADS/teiserver happens via Autohost interface.SPADSManages individual lobby rooms  Repo: https://github.com/Yaribz/SPADSGame AssetsRecoil Enginepr-downloaderCLI application that downloads updates in efficient format understood by the engine.  Repo: https://github.com/beyond-all-reason/pr-downloaderGame AssetsEngine, Maps, Game filesTeiserverThe main \"Server\" of the game. https://server4.beyondallreason.info/  It faciliates:  - Communication between players and hosts  - Accounts management  - Rating  - Moderation  Repo: https://github.com/beyond-all-reason/teiserver/PostgreSQLChobbyThe lobby player sees when opening the game  Repo: https://github.com/beyond-all-reason/BYAR-ChobbyBAR GameThe actual core Beyond All Reason game  Repo: https://github.com/beyond-all-reason/Beyond-All-Reason startsusesstarts Autohost ProtocolreadsreadsstartsstartsCLI invokewritesreadsbridge protocolSMTPSpringLobby protocolSpringLobby protocolEngine ProtocolSpringLobby protocoluploads replaysembedshttps://www.beyondallreason.info, built using [Webflow](https://webflow.com/) All game servers are provisioned and maintained via Ansible playbook.  Repo: https://github.com/beyond-all-reason/ansible-spads-setup We use multiple CDNs and endpoints for hosting different game assets and configuration.  We don't include all the arrows on the diagram for clarity. The server is provisioned and configured via Ansible playbook.  Repo: https://github.com/beyond-all-reason/ansible-teiserver BAR Live Services https://bar-rts.com/ hosts replay, list of active matches etc  - Frontend: https://github.com/beyond-all-reason/bar-live-services - Backend: https://github.com/beyond-all-reason/bar-db Responsible for downloading and updating engine and all of the assets before launching the game.  Repo: https://github.com/beyond-all-reason/spring-launcher A special version of Recoil Engine that doesn't run any simulation, but synchronizes and forwards all game commands between players.  All the communication between Game and SPADS/teiserver happens via Autohost interface. Manages individual lobby rooms  Repo: https://github.com/Yaribz/SPADS CLI application that downloads updates in efficient format understood by the engine.  Repo: https://github.com/beyond-all-reason/pr-downloader Engine, Maps, Game files The main \"Server\" of the game. https://server4.beyondallreason.info/  It faciliates:  - Communication between players and hosts  - Accounts management  - Rating  - Moderation  Repo: https://github.com/beyond-all-reason/teiserver/ The lobby player sees when opening the game  Repo: https://github.com/beyond-all-reason/BYAR-Chobby The actual core Beyond All Reason game  Repo: https://github.com/beyond-all-reason/Beyond-All-Reason </p>"},{"location":"current_infra/#player-local-flow","title":"Player local flow","text":"<p>The main way players interact with the game is by launching and playing the game.</p> <p>The entry point of the interaction is Spring Launcher, which is installed by the user via installer and is responsible for downloading all the other components of the game directly and via pr-downloader distributed with the launcher.</p> <p>The launcher then starts the Recoil engine process with the \"Menu\" configured to be Chobby, which has the UI to log in, start a single-player game, etc. Chobby itself can't do much because it's written in Lua and constrained to use the engine APIs, but it has support for opening network sockets. For any advanced functions, e.g., Discord rich presence, triggering map downloads, it calls the launcher via the local network interface.</p> <p>Chobby connects to the lobby server (teiserver) using the SpringLobby protocol for multiplayer features. It's responsible for starting the game in the same engine instance it's running in. For details about starting the game in the engine, see the article in Engine documentation.</p>"},{"location":"current_infra/#multiplayer-lobbies","title":"Multiplayer lobbies","text":"<p>teiserver is the central component that Chobby and game servers connect to. It handles account management, rating, moderation, chat, and overall passing messages between different components.</p> <p>The one thing that teiserver doesn't do is create new rooms. The rooms are created by SPADS running on the Game Server. There is a single room per SPADS process, with a single special SPADS process used to start and stop new instances (see the diagram in the section below for details).</p> <p>The lobby room logic is then split between teiserver and SPADS (It's something that is player visible: <code>$</code> vs <code>!</code> commands). SPADS contains the vast majority of lobby room logic and is responsible for starting the multiplayer game: starting the special engine dedicated instance and sending players the connection parameters.</p> <p>SPADS communicates with the engine running on the server using the \"Autohost\" protocol and has admin privileges to execute different commands, e.g., the <code>!stop</code> command is executed in SPADS, and it's SPADS that resolves the vote and decides whether to stop the battle or not.</p>"},{"location":"current_infra/#auxiliary-services","title":"Auxiliary services","text":"<p>Players also have access to the main website: https://www.beyondallreason.info/. The website is created in Webflow, but it also contains <code>&lt;iframe&gt;</code> with pages from https://bar-rts.com/ (BAR Live Services) that contain more interactive parts: replay browser, list of active battles, etc. BAR Live Services is a custom frontend and backend hosted on a dedicated VM, with PostgreSQL, etc.</p>"},{"location":"current_infra/#game-server","title":"Game Server","text":"<p>Below diagram shows the Game Server setup in more detail.</p> <p>The game server is managed by an Ansible playbook: https://github.com/beyond-all-reason/ansible-spads-setup</p> <p>Recoil Engine (dedicated)SPADSSPADS (Cluster Manager)Game Assetscronpr-downloaderMap SyncerA dedicated service that watches changes in maps-metadata and makes sure that server has all the maps by downloading new ones and removing old.  Source: https://github.com/beyond-all-reason/maps-metadata/tree/main/tools/map_syncerSPADS ConfigurationAll SPADS configuration is stored in https://github.com/beyond-all-reason/spads_config_bar  The configuration incudes all plugins, their configuration, and a bunch of scripts used on the server.Replay Upload ScriptJust a small bash script that is triggered by SPADS to upload replay for public matches to BAR live servicespluginsWe run [*plenty*](https://github.com/beyond-all-reason/spads_config_bar/tree/main/var/plugins) of different plugins, we call out BAR manager as it's to some degree special.unitsync.soDynamically loaded `unitsync.so` library from engine distribution that is used to read information about assets, list game version, modoptions etc.pluginsBar ManagerA special BAR dedicated plugin with some BAR centric functionality.  Source: https://github.com/beyond-all-reason/spads_config_bar/blob/main/var/plugins/barmanager.pyCluster ManagerA plugin that monitors how many SPADS processes are running and spins up new ones as needed, to make sure there is always some free lobby room available. startsstarts Autohost ProtocolCLI invokewriteswritesreadsreadsreadsreadstrigger update scriptA dedicated service that watches changes in maps-metadata and makes sure that server has all the maps by downloading new ones and removing old.  Source: https://github.com/beyond-all-reason/maps-metadata/tree/main/tools/map_syncer All SPADS configuration is stored in https://github.com/beyond-all-reason/spads_config_bar  The configuration incudes all plugins, their configuration, and a bunch of scripts used on the server. Just a small bash script that is triggered by SPADS to upload replay for public matches to BAR live services We run [*plenty*](https://github.com/beyond-all-reason/spads_config_bar/tree/main/var/plugins) of different plugins, we call out BAR manager as it's to some degree special. Dynamically loaded `unitsync.so` library from engine distribution that is used to read information about assets, list game version, modoptions etc. A special BAR dedicated plugin with some BAR centric functionality.  Source: https://github.com/beyond-all-reason/spads_config_bar/blob/main/var/plugins/barmanager.py A plugin that monitors how many SPADS processes are running and spins up new ones as needed, to make sure there is always some free lobby room available. Recoil Engine (dedicated)SPADSSPADS (Cluster Manager)Game Assetscronpr-downloaderMap SyncerA dedicated service that watches changes in maps-metadata and makes sure that server has all the maps by downloading new ones and removing old.  Source: https://github.com/beyond-all-reason/maps-metadata/tree/main/tools/map_syncerSPADS ConfigurationAll SPADS configuration is stored in https://github.com/beyond-all-reason/spads_config_bar  The configuration incudes all plugins, their configuration, and a bunch of scripts used on the server.Replay Upload ScriptJust a small bash script that is triggered by SPADS to upload replay for public matches to BAR live servicespluginsWe run [*plenty*](https://github.com/beyond-all-reason/spads_config_bar/tree/main/var/plugins) of different plugins, we call out BAR manager as it's to some degree special.unitsync.soDynamically loaded `unitsync.so` library from engine distribution that is used to read information about assets, list game version, modoptions etc.pluginsBar ManagerA special BAR dedicated plugin with some BAR centric functionality.  Source: https://github.com/beyond-all-reason/spads_config_bar/blob/main/var/plugins/barmanager.pyCluster ManagerA plugin that monitors how many SPADS processes are running and spins up new ones as needed, to make sure there is always some free lobby room available. startsstarts Autohost ProtocolCLI invokewriteswritesreadsreadsreadsreadstrigger update scriptA dedicated service that watches changes in maps-metadata and makes sure that server has all the maps by downloading new ones and removing old.  Source: https://github.com/beyond-all-reason/maps-metadata/tree/main/tools/map_syncer All SPADS configuration is stored in https://github.com/beyond-all-reason/spads_config_bar  The configuration incudes all plugins, their configuration, and a bunch of scripts used on the server. Just a small bash script that is triggered by SPADS to upload replay for public matches to BAR live services We run [*plenty*](https://github.com/beyond-all-reason/spads_config_bar/tree/main/var/plugins) of different plugins, we call out BAR manager as it's to some degree special. Dynamically loaded `unitsync.so` library from engine distribution that is used to read information about assets, list game version, modoptions etc. A special BAR dedicated plugin with some BAR centric functionality.  Source: https://github.com/beyond-all-reason/spads_config_bar/blob/main/var/plugins/barmanager.py A plugin that monitors how many SPADS processes are running and spins up new ones as needed, to make sure there is always some free lobby room available. </p>"}]}